version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name UdaPeople-backend-${workflow_id:0:5}
            aws cloudformation delete-stack --stack-name UdaPeople-frontend-${workflow_id:0:5}
            aws s3 rb s3://UdaPeople-${workflow_id:0:5} --force
            # exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
        default: "${workflow_id}"
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure https://kvdb.io/LenSAeevv3RGZnFLitxUTC/migration_${workflow_id:0:5})
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              # Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
              # exit 1
            fi

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm i
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          keys: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm i
            npm run build
            # exit 1
      - save_cache:
          paths: [backend/node_modules]
          keys: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run:
          name: frontend test
          command: |
            cd frontend
            npm i
            npm run test
  test-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run:
          name: backend test
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run:
          name: scan frontend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run:
          name: scan backend
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=your-tag \
              --stack-name ${workflow_id:0:5} \
              --parameter-overrides ID=${workflow_id:0:5}  
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name ${workflow_id:0:5} \
              --parameter-overrides ID=${workflow_id:0:5}  
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["5d:10:35:72:f0:59:b4:82:3a:3f:0e:0b:c3:1d:01:4f"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible -y
            pip install awscli -y
            # exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            ansible-playbook -i project/.circleci/ansible/inventory.txt ./.circleci/ansible/configure-server.yml
            # exit 1
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            sudo apt-get update
            sudo apt-get install awscli -y
            cd backend
            echo ENVIROMENT=production > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm install
            # Run and save the migration output
            # cat .env
            npm run migrations > ~/project/backend/migrations_dump.txt
            # cat migrations_dump.txt
            # exit 1
      - run:
          name: Send migration results to kvdb
          command: |
            # Your code here
            curl --insecure https://kvdb.io/LenSAeevv3RGZnFLitxUTC/migration_${workflow_id:0:5}  -d '1'
            # exit 1
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip jq npm
            curl -sL https://rpm.nodesource.com/setup_13.8.0 | bash -
            yum -y install nodejs
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters Name=tag:Name,Values=backend-${workflow_id:0:5} Name=instance-state-name,Values=running \
              --query Reservations[*].Instances[*].PublicIpAddress \
              --no-paginate \
              --output text)
            API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            # cat frontend/.env
            cd frontend
            npm i
            npm run build
            npm audit fix --audit-level=critical --force
            export API_URL="http://${BACKEND_IP}:3030"

      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            aws s3 sync ./frontend/dist s3://"UdaPeople-${workflow_id:0:5}" --debug
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: [31:9c:ea:d6:47:7b:6f:55:ba:1a:5e:f1:67:0b:1c:87]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible -y
            pip install awscli -y
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend/
            echo ENVIROMENT=production > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            tar -cvf backend.tar backend/
            ansible-playbook -i project/.circleci/ansible/inventory.txt ./.circleci/ansible/deploy-backend.yml -vvv
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} Name=instance-state-name,Values=running \
              --query Reservations[*].Instances[*].PublicIpAddress \
              --no-paginate \
              --output text)
            echo ${BACKEND_IP}
            export API_URL="http://${BACKEND_IP}:3030"
            echo ${API_URL}
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports \
              --query "Exports[?Name==\`WorkflowID\`].Value" \
              --region us-east-1 \
              --no-paginate \
              --output text)
            echo "Old Workflow ID: $OLD_WORKFLOW_ID"
            aws cloudformation update-stack \
              --use-previous-template \
              --stack-name InitialStack \
              --parameters ParameterKey=WorkflowID,ParameterValue=${WORKFLOW_ID:0:5},UsePreviousValue=false
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment

cleanup:
  docker:
    # Docker image here
    - image: amazon/aws-cli
  steps:
    # Checkout code from git
    - checkout:
        path: ~/
    - run:
        name: Get old stack workflow id
        command: |
          # your code here
          yum -y install tar gzip
          export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate \
            --output text)
          echo "OldWorkflowID: ${OldWorkflowID}"
         # Export the list of stacks into an array
          export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate \
            --output text)

    - run:
        name: Remove old stacks and files
        command: |
          if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
          then
            # your code here
            aws cloudformation delete-stack --stack-name "UdaPeople-backend-${OldWorkflowID}"
            aws s3 rm "s3://UdaPeople-${OldWorkflowID}" --recursive
            aws cloudformation delete-stack --stack-name "UdaPeople-frontend-${OldWorkflowID}"
          fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
